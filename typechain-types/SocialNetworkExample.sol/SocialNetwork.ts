/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace SocialNetwork {
  export type PostStruct = {
    id: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    totalLikes: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
    user: PromiseOrValue<string>;
    likes: PromiseOrValue<string>[];
  };

  export type PostStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string[]
  ] & {
    id: BigNumber;
    timestamp: BigNumber;
    totalLikes: BigNumber;
    message: string;
    user: string;
    likes: string[];
  };
}

export interface SocialNetworkInterface extends utils.Interface {
  functions: {
    "getAllPosts()": FunctionFragment;
    "getLastPostId()": FunctionFragment;
    "getPost(uint256)": FunctionFragment;
    "like(uint256)": FunctionFragment;
    "post(string)": FunctionFragment;
    "posts(uint256)": FunctionFragment;
    "unlike(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllPosts"
      | "getLastPostId"
      | "getPost"
      | "like"
      | "post"
      | "posts"
      | "unlike"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllPosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastPostId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "posts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlike",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllPosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPostId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlike", data: BytesLike): Result;

  events: {};
}

export interface SocialNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SocialNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllPosts(
      overrides?: CallOverrides
    ): Promise<[SocialNetwork.PostStructOutput[]]>;

    getLastPostId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        message: string;
        totalLikes: BigNumber;
        time: BigNumber;
      }
    >;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalLikes: BigNumber;
        message: string;
        user: string;
      }
    >;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllPosts(
    overrides?: CallOverrides
  ): Promise<SocialNetwork.PostStructOutput[]>;

  getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

  getPost(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      message: string;
      totalLikes: BigNumber;
      time: BigNumber;
    }
  >;

  like(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  post(
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  posts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string] & {
      id: BigNumber;
      timestamp: BigNumber;
      totalLikes: BigNumber;
      message: string;
      user: string;
    }
  >;

  unlike(
    _postId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllPosts(
      overrides?: CallOverrides
    ): Promise<SocialNetwork.PostStructOutput[]>;

    getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        message: string;
        totalLikes: BigNumber;
        time: BigNumber;
      }
    >;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalLikes: BigNumber;
        message: string;
        user: string;
      }
    >;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAllPosts(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPostId(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastPostId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPost(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    like(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    post(
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    posts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlike(
      _postId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
