/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Government,
  GovernmentInterface,
} from "../../GovernmentExample.sol/Government";
import type { PromiseOrValue } from "../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "candidate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numOfVotes",
        type: "uint256",
      },
    ],
    name: "NewCandidate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "candidate",
        type: "address",
      },
    ],
    name: "NewVote",
    type: "event",
  },
  {
    inputs: [],
    name: "abstain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "determinePresident",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllCandidates",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "candidate",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numOfVotes",
            type: "uint256",
          },
        ],
        internalType: "struct Government.Candidate[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPresident",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isCandidate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isVoter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_candidateAddress",
        type: "address",
      },
    ],
    name: "numberOfVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "runForCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_candidateAddress",
        type: "address",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061003c604051806060016040528060218152602001610cba6021913961004160201b6109951760201c565b6100fa565b6100888160405160240161005591906100ac565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b1790915261008b16565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208083528351808285015260005b818110156100d9578581018301518582016040015282016100bd565b506000604082860101526040601f19601f8301168501019250505092915050565b610bb1806101096000396000f3fe608060405234801561001057600080fd5b50600436106100c85760003560e01c80635e98e4c711610081578063a80073631161005b578063a800736314610179578063d51b9e931461018c578063f38d00f0146101af57600080fd5b80635e98e4c71461012b5780636dd7d8ea14610133578063a7771ee31461014657600080fd5b8063231ae100116100b2578063231ae100146100f75780632e6997fe146100ff57806351906bb01461011457600080fd5b8062738d22146100cd57806305be049a146100ed575b600080fd5b6005546040516001600160a01b0390911681526020015b60405180910390f35b6100f56101b8565b005b6100f56103bf565b610107610552565b6040516100e49190610a2a565b61011d60045481565b6040519081526020016100e4565b6100f56105d4565b6100f5610141366004610a8c565b6106ad565b610169610154366004610a8c565b60026020526000908152604090205460ff1681565b60405190151581526020016100e4565b61011d610187366004610a8c565b610903565b61016961019a366004610a8c565b60016020526000908152604090205460ff1681565b61011d60035481565b3360009081526001602081905260409091205460ff16151590036102235760405162461bcd60e51b815260206004820152601460248201527f596f7520616c72656164792072756e20666f722100000000000000000000000060448201526064015b60405180910390fd5b600354600003610244574260038190556102409062127500610ad2565b6004555b6003541561029d57426004541161029d5760405162461bcd60e51b815260206004820152601c60248201527f596f752061726520746f6f206c61746520746f2072756e20666f722100000000604482015260640161021a565b336000818152600160208181526040808420805460ff191684179055805160608082018352868252428285018181528385018881528854978801895588805293517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636003909802978801805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56487015591517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565909501949094558151958652918501919091528301919091527fd0271bdcef03de44ca7c19d42b61f5edf5d04b28ec7a0a804fc318b415dd09f4910160405180910390a1565b4260045411156104115760405162461bcd60e51b815260206004820152601260248201527f6e6f74207965742074696d657374616d70210000000000000000000000000000604482015260640161021a565b600080546104615760405162461bcd60e51b815260206004820152601c60248201527f546865726520617265206e6f205f63616e646964617465732079657400000000604482015260640161021a565b60005b60005461047390600190610aeb565b8110156104fe576000610487826001610ad2565b8154811061049757610497610afe565b906000526020600020906003020160020154600083815481106104bc576104bc610afe565b906000526020600020906003020160020154116104e6576104de816001610ad2565b9150816104eb565b809150815b50806104f681610b14565b915050610464565b506000818154811061051257610512610afe565b60009182526020909120600390910201546005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905550565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156105cb576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610576565b50505050905090565b3360009081526002602052604090205460ff1615156001036106385760405162461bcd60e51b815260206004820152601c60248201527f596f7520616c726561647920766f7465206f72206162737461696e2100000000604482015260640161021a565b600354156106915742600454116106915760405162461bcd60e51b815260206004820152601960248201527f596f752061726520746f6f206c61746520746f20766f74652100000000000000604482015260640161021a565b336000908152600260205260409020805460ff19166001179055565b6000805b60005481101561070857600081815481106106ce576106ce610afe565b60009182526020909120600390910201546001600160a01b03908116908416036106f6578091505b8061070081610b14565b9150506106b1565b503360009081526001602081905260409091205460ff161515900361076f5760405162461bcd60e51b815260206004820152601660248201527f43616e646964617465732063616e277420766f74652100000000000000000000604482015260640161021a565b3360009081526002602052604090205460ff1615156001036107d35760405162461bcd60e51b815260206004820152601c60248201527f596f7520616c726561647920766f7465206f72206162737461696e2100000000604482015260640161021a565b6003541561082c57426004541161082c5760405162461bcd60e51b815260206004820152601960248201527f596f752061726520746f6f206c61746520746f20766f74652100000000000000604482015260640161021a565b336000908152600260205260408120805460ff1916600190811790915581549091908390811061085e5761085e610afe565b9060005260206000209060030201600201600082825461087e9190610ad2565b925050819055507fc09bde542ef41b2c8d1d26fdbcbecee4d71cb6efa67a9f6a4d5befe12f8a35ae33600083815481106108ba576108ba610afe565b60009182526020909120600390910201546040516108f792916001600160a01b0316906001600160a01b0392831681529116602082015260400190565b60405180910390a15050565b6000805b60005481101561098c57826001600160a01b03166000828154811061092e5761092e610afe565b60009182526020909120600390910201546001600160a01b03160361097a576000818154811061096057610960610afe565b906000526020600020906003020160020154915050919050565b8061098481610b14565b915050610907565b50600092915050565b610a06816040516024016109a99190610b2d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052610a09565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b602080825282518282018190526000919060409081850190868401855b82811015610a7f57815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101610a47565b5091979650505050505050565b600060208284031215610a9e57600080fd5b81356001600160a01b0381168114610ab557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ae557610ae5610abc565b92915050565b81810381811115610ae557610ae5610abc565b634e487b7160e01b600052603260045260246000fd5b600060018201610b2657610b26610abc565b5060010190565b600060208083528351808285015260005b81811015610b5a57858101830151858201604001528201610b3e565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220cb160d4435e8856284dae88d081d94baa81f3f450b8ed5f1174fff1ad04c4aea64736f6c634300081100335468697320697320536d617274476f7665726e6d656e7420636f6e747261637421";

type GovernmentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernmentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Government__factory extends ContractFactory {
  constructor(...args: GovernmentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Government> {
    return super.deploy(overrides || {}) as Promise<Government>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Government {
    return super.attach(address) as Government;
  }
  override connect(signer: Signer): Government__factory {
    return super.connect(signer) as Government__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernmentInterface {
    return new utils.Interface(_abi) as GovernmentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Government {
    return new Contract(address, _abi, signerOrProvider) as Government;
  }
}
