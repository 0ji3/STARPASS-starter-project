/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  SocialNetwork,
  SocialNetworkInterface,
} from "../../SocialNetworkExample.sol/SocialNetwork";
import type { PromiseOrValue } from "../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "getAllPosts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalLikes",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "likes",
            type: "address[]",
          },
        ],
        internalType: "struct SocialNetwork.Post[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastPostId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "getPost",
    outputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalLikes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "like",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "post",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "posts",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalLikes",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "unlike",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e6d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806374d21ae01161005b57806374d21ae0146100e65780638ee93cf3146100fb578063d5ccb9091461010e578063e82935da1461012457600080fd5b80630b1e7f831461008257806330561100146100af57806340731c24146100c4575b600080fd5b6100956100903660046109ed565b610137565b6040516100a6959493929190610a4c565b60405180910390f35b6100b761020e565b6040516100a69190610a8c565b6100d76100d23660046109ed565b61038f565b6040516100a693929190610b78565b6100f96100f43660046109ed565b610545565b005b6100f9610109366004610bb3565b610551565b6101166106cc565b6040519081526020016100a6565b6100f96101323660046109ed565b610705565b6000818154811061014757600080fd5b906000526020600020906006020160009150905080600001549080600101549080600201549080600301805461017c90610c64565b80601f01602080910402602001604051908101604052809291908181526020018280546101a890610c64565b80156101f55780601f106101ca576101008083540402835291602001916101f5565b820191906000526020600020905b8154815290600101906020018083116101d857829003601f168201915b505050600490930154919250506001600160a01b031685565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561038657838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201805461028390610c64565b80601f01602080910402602001604051908101604052809291908181526020018280546102af90610c64565b80156102fc5780601f106102d1576101008083540402835291602001916102fc565b820191906000526020600020905b8154815290600101906020018083116102df57829003601f168201915b505050918352505060048201546001600160a01b0316602080830191909152600583018054604080518285028101850182528281529401939283018282801561036e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610350575b50505050508152505081526020019060010190610232565b50505050905090565b606060008060005b6000548110156104e45784600082815481106103b5576103b5610c9e565b906000526020600020906006020160000154036104d257600081815481106103df576103df610c9e565b90600052602060002090600602016003016000828154811061040357610403610c9e565b9060005260206000209060060201600201546000838154811061042857610428610c9e565b90600052602060002090600602016001015482805461044690610c64565b80601f016020809104026020016040519081016040528092919081815260200182805461047290610c64565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b505050505092509350935093505061053e565b806104dc81610cca565b915050610397565b506105276040518060c001604052806000815260200160008152602001600081526020016060815260200160006001600160a01b03168152602001606081525090565b806060015181604001518260200151935093509350505b9193909250565b61054e81610705565b50565b6105936040518060c001604052806000815260200160008152602001600081526020016060815260200160006001600160a01b03168152602001606081525090565b600154815233608082015260608101828152426020830190815260008054600181018255908052835160069091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810191825591517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56483015560408401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56583015591518392917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56601906106689082610d31565b50608082015160048201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560a082015180516106b7916005840191602090910190610966565b5050506106c8600180546001019055565b5050565b6000805481906106de90600190610df1565b815481106106ee576106ee610c9e565b906000526020600020906006020160000154905090565b6000805b60005481101561096157826000828154811061072757610727610c9e565b9060005260206000209060060201600001540361094f57600080828154811061075257610752610c9e565b9060005260206000209060060201600501905060005b81548110156108b757336001600160a01b031682828154811061078d5761078d610c9e565b6000918252602090912001546001600160a01b0316036108a557815482906107b790600190610df1565b815481106107c7576107c7610c9e565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106107f7576107f7610c9e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061083557610835610e0a565b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905590910190915580548490811061087957610879610c9e565b60009182526020822060026006909202010180549161089783610e20565b9190505550600193506108b7565b806108af81610cca565b915050610768565b508261094d57600082815481106108d0576108d0610c9e565b60009182526020808320600560069093020191909101805460018101825590835290822001805473ffffffffffffffffffffffffffffffffffffffff19163317905580548390811061092457610924610c9e565b60009182526020822060026006909202010180549161094283610cca565b919050555050505050565b505b8061095981610cca565b915050610709565b505050565b8280548282559060005260206000209081019282156109c8579160200282015b828111156109c8578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190610986565b506109d49291506109d8565b5090565b5b808211156109d457600081556001016109d9565b6000602082840312156109ff57600080fd5b5035919050565b6000815180845260005b81811015610a2c57602081850181015186830182015201610a10565b506000602082860101526020601f19601f83011685010191505092915050565b85815284602082015283604082015260a060608201526000610a7160a0830185610a06565b90506001600160a01b03831660808301529695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610b6957603f198a8503018652825160c081518652898201518a87015288820151898701526060808301518282890152610af483890182610a06565b6080858101516001600160a01b03908116918b019190915260a0958601518a8303968b01969096528551808352958e0195889550918e0193509091505b81841015610b5357845181168352938c019360019390930192918c0191610b31565b5050978a01979550505091870191600101610ab4565b50919998505050505050505050565b606081526000610b8b6060830186610a06565b60208301949094525060400152919050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610bc557600080fd5b813567ffffffffffffffff80821115610bdd57600080fd5b818401915084601f830112610bf157600080fd5b813581811115610c0357610c03610b9d565b604051601f8201601f19908116603f01168101908382118183101715610c2b57610c2b610b9d565b81604052828152876020848701011115610c4457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c90821680610c7857607f821691505b602082108103610c9857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610cdc57610cdc610cb4565b5060010190565b601f82111561096157600081815260208120601f850160051c81016020861015610d0a5750805b601f850160051c820191505b81811015610d2957828155600101610d16565b505050505050565b815167ffffffffffffffff811115610d4b57610d4b610b9d565b610d5f81610d598454610c64565b84610ce3565b602080601f831160018114610d945760008415610d7c5750858301515b600019600386901b1c1916600185901b178555610d29565b600085815260208120601f198616915b82811015610dc357888601518255948401946001909101908401610da4565b5085821015610de15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115610e0457610e04610cb4565b92915050565b634e487b7160e01b600052603160045260246000fd5b600081610e2f57610e2f610cb4565b50600019019056fea2646970667358221220e5038dcbd0a12767752d755429d00d64492875f05078296988909e7a8b90eaa464736f6c63430008110033";

type SocialNetworkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SocialNetworkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SocialNetwork__factory extends ContractFactory {
  constructor(...args: SocialNetworkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SocialNetwork> {
    return super.deploy(overrides || {}) as Promise<SocialNetwork>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SocialNetwork {
    return super.attach(address) as SocialNetwork;
  }
  override connect(signer: Signer): SocialNetwork__factory {
    return super.connect(signer) as SocialNetwork__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SocialNetworkInterface {
    return new utils.Interface(_abi) as SocialNetworkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SocialNetwork {
    return new Contract(address, _abi, signerOrProvider) as SocialNetwork;
  }
}
