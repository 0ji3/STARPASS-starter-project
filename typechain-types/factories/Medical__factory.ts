/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Medical, MedicalInterface } from "../Medical";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_patientAddress",
        type: "address",
      },
    ],
    name: "getMedicalData",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "bloodType",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "lastUpdatedtime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_patientAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_medicalProviderAddress",
        type: "address",
      },
    ],
    name: "isViewingAccessGranted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_medicalProviderAddress",
        type: "address",
      },
    ],
    name: "provideViewingAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_bloodType",
        type: "string",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_bloodType",
        type: "string",
      },
    ],
    name: "updateBloodType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "updateName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106f8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806385937b951161005057806385937b95146100dc5780639e412f6a14610107578063ab60a3a11461011a57600080fd5b80633ffbd47f146100775780637b6108701461008c57806384da92a7146100c9575b600080fd5b61008a6100853660046103ec565b61013d565b005b61008a61009a36600461046c565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61008a6100d736600461048e565b61017a565b6100ef6100ea36600461046c565b61018a565b6040516100fe93929190610511565b60405180910390f35b61008a61011536600461048e565b6102f9565b61012d610128366004610547565b610305565b60405190151581526020016100fe565b6002805473ffffffffffffffffffffffffffffffffffffffff19163317905560006101688382610602565b5060016101758282610602565b505050565b60006101868282610602565b5050565b60025460609081906000906001600160a01b038086169116036102d0576000600160008280546101b99061057a565b80601f01602080910402602001604051908101604052809291908181526020018280546101e59061057a565b80156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b505050505092508180546102459061057a565b80601f01602080910402602001604051908101604052809291908181526020018280546102719061057a565b80156102be5780601f10610293576101008083540402835291602001916102be565b820191906000526020600020905b8154815290600101906020018083116102a157829003601f168201915b505050505091509250925092506102f2565b5050604080516020808201835260008083528351918201909352828152909250905b9193909250565b60016101868282610602565b6002546000906001600160a01b03848116911614801561033257506003546001600160a01b038381169116145b1561033f57506001610343565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261037057600080fd5b813567ffffffffffffffff8082111561038b5761038b610349565b604051601f8301601f19908116603f011681019082821181831017156103b3576103b3610349565b816040528381528660208588010111156103cc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156103ff57600080fd5b823567ffffffffffffffff8082111561041757600080fd5b6104238683870161035f565b9350602085013591508082111561043957600080fd5b506104468582860161035f565b9150509250929050565b80356001600160a01b038116811461046757600080fd5b919050565b60006020828403121561047e57600080fd5b61048782610450565b9392505050565b6000602082840312156104a057600080fd5b813567ffffffffffffffff8111156104b757600080fd5b6104c38482850161035f565b949350505050565b6000815180845260005b818110156104f1576020818501810151868301820152016104d5565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600061052460608301866104cb565b828103602084015261053681866104cb565b915050826040830152949350505050565b6000806040838503121561055a57600080fd5b61056383610450565b915061057160208401610450565b90509250929050565b600181811c9082168061058e57607f821691505b6020821081036105ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561017557600081815260208120601f850160051c810160208610156105db5750805b601f850160051c820191505b818110156105fa578281556001016105e7565b505050505050565b815167ffffffffffffffff81111561061c5761061c610349565b6106308161062a845461057a565b846105b4565b602080601f831160018114610665576000841561064d5750858301515b600019600386901b1c1916600185901b1785556105fa565b600085815260208120601f198616915b8281101561069457888601518255948401946001909101908401610675565b50858210156106b25787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220ca57814352e3fbfc14d7a401b2bd87d4cc5a7cac539a9a123f451667fb48da4564736f6c63430008110033";

type MedicalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MedicalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Medical__factory extends ContractFactory {
  constructor(...args: MedicalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Medical> {
    return super.deploy(overrides || {}) as Promise<Medical>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Medical {
    return super.attach(address) as Medical;
  }
  override connect(signer: Signer): Medical__factory {
    return super.connect(signer) as Medical__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MedicalInterface {
    return new utils.Interface(_abi) as MedicalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Medical {
    return new Contract(address, _abi, signerOrProvider) as Medical;
  }
}
