/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace Government {
  export type CandidateStruct = {
    candidate: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    numOfVotes: PromiseOrValue<BigNumberish>;
  };

  export type CandidateStructOutput = [string, BigNumber, BigNumber] & {
    candidate: string;
    timestamp: BigNumber;
    numOfVotes: BigNumber;
  };
}

export interface GovernmentInterface extends utils.Interface {
  functions: {
    "abstain()": FunctionFragment;
    "determinePresident()": FunctionFragment;
    "endTimeStamp()": FunctionFragment;
    "getAllCandidates()": FunctionFragment;
    "getPresident()": FunctionFragment;
    "isCandidate(address)": FunctionFragment;
    "isVoter(address)": FunctionFragment;
    "numberOfVotes(address)": FunctionFragment;
    "runForCandidate()": FunctionFragment;
    "startTimeStamp()": FunctionFragment;
    "vote(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abstain"
      | "determinePresident"
      | "endTimeStamp"
      | "getAllCandidates"
      | "getPresident"
      | "isCandidate"
      | "isVoter"
      | "numberOfVotes"
      | "runForCandidate"
      | "startTimeStamp"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "abstain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "determinePresident",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPresident",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "runForCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "abstain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "determinePresident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runForCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "NewCandidate(address,uint256,uint256)": EventFragment;
    "NewVote(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCandidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVote"): EventFragment;
}

export interface NewCandidateEventObject {
  candidate: string;
  timestamp: BigNumber;
  numOfVotes: BigNumber;
}
export type NewCandidateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewCandidateEventObject
>;

export type NewCandidateEventFilter = TypedEventFilter<NewCandidateEvent>;

export interface NewVoteEventObject {
  voter: string;
  candidate: string;
}
export type NewVoteEvent = TypedEvent<[string, string], NewVoteEventObject>;

export type NewVoteEventFilter = TypedEventFilter<NewVoteEvent>;

export interface Government extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernmentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abstain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    determinePresident(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllCandidates(
      overrides?: CallOverrides
    ): Promise<[Government.CandidateStructOutput[]]>;

    getPresident(overrides?: CallOverrides): Promise<[string]>;

    isCandidate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numberOfVotes(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    runForCandidate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  abstain(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  determinePresident(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  getAllCandidates(
    overrides?: CallOverrides
  ): Promise<Government.CandidateStructOutput[]>;

  getPresident(overrides?: CallOverrides): Promise<string>;

  isCandidate(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoter(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numberOfVotes(
    _candidateAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  runForCandidate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _candidateAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abstain(overrides?: CallOverrides): Promise<void>;

    determinePresident(overrides?: CallOverrides): Promise<void>;

    endTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCandidates(
      overrides?: CallOverrides
    ): Promise<Government.CandidateStructOutput[]>;

    getPresident(overrides?: CallOverrides): Promise<string>;

    isCandidate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numberOfVotes(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    runForCandidate(overrides?: CallOverrides): Promise<void>;

    startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewCandidate(address,uint256,uint256)"(
      candidate?: null,
      timestamp?: null,
      numOfVotes?: null
    ): NewCandidateEventFilter;
    NewCandidate(
      candidate?: null,
      timestamp?: null,
      numOfVotes?: null
    ): NewCandidateEventFilter;

    "NewVote(address,address)"(
      voter?: null,
      candidate?: null
    ): NewVoteEventFilter;
    NewVote(voter?: null, candidate?: null): NewVoteEventFilter;
  };

  estimateGas: {
    abstain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    determinePresident(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getPresident(overrides?: CallOverrides): Promise<BigNumber>;

    isCandidate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfVotes(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    runForCandidate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abstain(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    determinePresident(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCandidates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPresident(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCandidate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfVotes(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    runForCandidate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
